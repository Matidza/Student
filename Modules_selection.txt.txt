To create a route in Flask that allows a logged-in user to select modules from the `Modules` table and add them to their personal dashboard (stored in the `UserModules` table), and to delete the references without affecting the `Modules` table, you can follow these steps:

### Database Structure Assumption

- **Users**: Contains user information (e.g., `id`, `username`, `password_hash`).
- **Modules**: Contains all available modules (e.g., `id`, `module_name`, `module_description`).
- **UserModules**: Contains references to the modules selected by users (e.g., `id`, `user_id`, `module_id`).

### Flask Routes

#### 1. Selecting and Adding Modules to User Dashboard

Here's a route that allows a user to select modules and add them to their dashboard:

```python
from flask import Flask, render_template, redirect, url_for, flash, request
from flask_login import login_required, current_user
from models import db, Modules, UserModules

app = Flask(__name__)

@app.route('/modules', methods=['GET', 'POST'])
@login_required
def modules():
    available_modules = Modules.query.all()

    if request.method == 'POST':
        selected_modules = request.form.getlist('modules')

        for module_id in selected_modules:
            # Check if the module is already added to the user's dashboard
            existing_module = UserModules.query.filter_by(user_id=current_user.id, module_id=module_id).first()
            if not existing_module:
                user_module = UserModules(user_id=current_user.id, module_id=module_id)
                db.session.add(user_module)

        db.session.commit()
        flash('Modules added to your dashboard!', 'success')
        return redirect(url_for('dashboard'))

    return render_template('modules.html', modules=available_modules)
```

In the template `modules.html`, you would have a form that allows users to select modules:

```html
<form method="POST">
    {% for module in modules %}
        <div>
            <input type="checkbox" name="modules" value="{{ module.id }}">
            {{ module.module_name }}
        </div>
    {% endfor %}
    <button type="submit">Add to Dashboard</button>
</form>
```

#### 2. Displaying User Modules on Dashboard

Here’s a route to display the user’s dashboard with their selected modules:

```python
@app.route('/dashboard')
@login_required
def dashboard():
    user_modules = UserModules.query.filter_by(user_id=current_user.id).all()
    return render_template('dashboard.html', user_modules=user_modules)
```

In `dashboard.html`, you can loop through the `user_modules` to display them:

```html
<h2>Your Modules</h2>
<ul>
    {% for user_module in user_modules %}
        <li>{{ user_module.module.module_name }}
            <a href="{{ url_for('delete_module', module_id=user_module.id) }}">Delete</a>
        </li>
    {% endfor %}
</ul>
```

#### 3. Deleting a Module Reference

Here’s a route to delete a module reference from the user’s dashboard:

```python
@app.route('/delete_module/<int:module_id>', methods=['POST'])
@login_required
def delete_module(module_id):
    user_module = UserModules.query.filter_by(id=module_id, user_id=current_user.id).first()

    if user_module:
        db.session.delete(user_module)
        db.session.commit()
        flash('Module removed from your dashboard!', 'success')

    return redirect(url_for('dashboard'))
```

### Models Structure

Ensure your SQLAlchemy models are set up correctly:

```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Users(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), nullable=False, unique=True)
    password_hash = db.Column(db.String(150), nullable=False)

class Modules(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    module_name = db.Column(db.String(150), nullable=False)
    module_description = db.Column(db.String(300))

class UserModules(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    module_id = db.Column(db.Integer, db.ForeignKey('modules.id'), nullable=False)

    user = db.relationship('Users', backref='user_modules')
    module = db.relationship('Modules', backref='module_users')
```

### Summary

- **Route `/modules`**: Displays available modules and allows users to add them to their dashboard.
- **Route `/dashboard`**: Displays the modules the user has added to their dashboard.
- **Route `/delete_module/<int:module_id>`**: Deletes a module reference from the user’s dashboard.

This setup ensures that when a user adds a module to their dashboard, only a reference is stored in the `UserModules` table, and when they delete it, only the reference is removed, leaving the original module intact in the `Modules` table.