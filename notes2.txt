Got it! Given your setup, you’ll need to adjust the query so that it only retrieves notes related to the selected module by the current user. Here’s how to do it:
1. Update Your Flask View

You need to fetch the module_id from the UserModules table and use it to filter the notes accordingly.

Here’s an updated example of how to modify your Flask view:

python

from flask import render_template
from yourapp.models import Vaal, Notes, UserModules

@app.route('/your_route')
def your_view():
    current_user_id = current_user.id

    # Get the module ID from UserModules for the current user
    user_module = UserModules.query.filter_by(user_id=current_user_id).first()
    current_module_id = user_module.module_id if user_module else None

    # Query the module
    module = Vaal.query.get(current_module_id)
    
    # Query notes related to the current module and current user
    notes = Notes.query.filter_by(selected_module_id=current_module_id, user_id=current_user_id).all()

    return render_template('your_template.html', module=module, notes=notes)

2. Update Your Template

In your template, you can now display the notes as before, since the notes variable passed to the template will already be filtered:

html

{% if current_user.id == module.user_id %}
    <div class="module-item mb-3 shadow-sm p-3 mb-5 bg-white rounded border-white">
        <!-- Module Name -->
        <div class="header">
            <h5>{{ module.Vaal.Module }}</h5>
            <i class="uil uil-ellipsis-v" onclick="toggleDropdown(this)"></i>
        </div>

        <!-- Lecturer Info -->
        <div class="info-section">
            <h3 class="info-title">Lecturer</h3>
            <div class="info-details">
                <h6>Mr. Smith J.E</h6>
                <h6>Email: <a href="mailto:Smith@gmail.com">Smith@gmail.com</a></h6>
                <h6>Building A8</h6>
                <h6>Office 210</h6>
            </div>
        </div>

        <!-- Exam Info -->
        <div class="info-section">
            <h4 class="info-title">Examination</h4>
            <div class="info-details">
                <h6>Date: {{ module.Vaal.Date }}</h6>
                <h6>Start: {{ module.Vaal.Session }}</h6>
                <h6>Venue: {{ module.Vaal.Venue }}</h6>
                <h6>Students: {{ module.Vaal.Students }}</h6>
            </div>
        </div>
    
        <!-- Add Notes Button -->
        <div class="header-align-right">
            <a href="{{ url_for('notesform') }}">
                <button type="submit" class="btn btn-primary">Notes+</button>
            </a>
        </div>

        <div class="module-container">
            {% for note in notes %}
                <div class="module-item mb-3 shadow-sm p-3 mb-5 bg-white rounded border-white">
                    <div class="header">
                        <h4>{{ note.VaalNotes.Module }}</h4><br>
                        <i class="uil uil-ellipsis-v" onclick="toggleDropdown(this)"></i>
                    </div>

                    <a class="dropdown-item" href="#"> 
                        <h6>
                            Title: {{ note.title }}<br>
                            <i>Date: {{ note.date_created }}</i>
                        </h6>
                    </a>

                    <div class="dropdown-content" style="display: none;">
                        <form method="POST" action="" onsubmit="return confirm('Delete Note?')">
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </div>
                </div>
            {% endfor %}
        </div>

        <!-- Dropdown Content (Initially Hidden) -->
        <div class="dropdown-content" style="display: none;">
            <form method="POST" action="/deletemod/{{ module.id }}" onsubmit="return confirm('Delete Module?')">
                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
            </form>
        </div>
    </div>
{% endif %}

Summary

    Backend: Fetch the module_id from the UserModules table, then use this to filter notes for the current user and module.
    Frontend: Display the filtered notes for the specific module and user.

This approach ensures that only the notes related to the selected module are shown.
