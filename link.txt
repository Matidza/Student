To implement this in Flask with MySQL, you will need to structure your database schema so that the user's selections from the global table are linked to their user account in a way that only affects their dashboard, without modifying the global data itself. Here’s how you can approach it:

### Database Design:

1. **Global Table (e.g., `global_items`)**: This table contains the items that all users can view and select. It should not be altered when users add or remove items from their dashboards.

2. **User Table (e.g., `users`)**: This table contains user information, like `id`, `username`, `email`, etc.

3. **User Selection Table (e.g., `user_dashboard`)**: This table will link the user to the items they've added to their dashboard. It should contain references to both the user and the items from the global table, without affecting the global table itself.

   **Example Schema:**
   ```sql
   CREATE TABLE global_items (
       id INT AUTO_INCREMENT PRIMARY KEY,
       item_name VARCHAR(255) NOT NULL,
       description TEXT
   );

   CREATE TABLE users (
       id INT AUTO_INCREMENT PRIMARY KEY,
       username VARCHAR(255) UNIQUE NOT NULL,
       email VARCHAR(255) UNIQUE NOT NULL,
       password_hash VARCHAR(255) NOT NULL
   );

   CREATE TABLE user_dashboard (
       user_id INT,
       item_id INT,
       PRIMARY KEY (user_id, item_id),
       FOREIGN KEY (user_id) REFERENCES users(id),
       FOREIGN KEY (item_id) REFERENCES global_items(id)
   );
   ```

   - `global_items`: Stores the items that can be selected by users.
   - `users`: Stores the user information.
   - `user_dashboard`: A junction table that maps the user’s selection to the items from the global table.

### Implementation:

#### 1. **Selecting Items for the Dashboard**

When a user selects an item from the global list to add to their dashboard, you'll insert a row into the `user_dashboard` table with the `user_id` and the `item_id`.

**Example Flask Route for Adding to the Dashboard:**
```python
from flask import Flask, render_template, request, redirect, url_for, session
from flask_mysqldb import MySQL

app = Flask(__name__)

# Assuming MySQL is already configured
mysql = MySQL(app)

@app.route('/add_to_dashboard', methods=['POST'])
def add_to_dashboard():
    if 'user_id' in session:
        user_id = session['user_id']
        item_id = request.form['item_id']
        
        cursor = mysql.connection.cursor()
        query = "INSERT INTO user_dashboard (user_id, item_id) VALUES (%s, %s)"
        cursor.execute(query, (user_id, item_id))
        mysql.connection.commit()
        cursor.close()
        
        return redirect(url_for('dashboard'))
    else:
        return redirect(url_for('login'))
```

#### 2. **Displaying User's Dashboard**

To display a user's dashboard, you would query the `user_dashboard` table to get the items associated with that user.

**Example Flask Route for Displaying the Dashboard:**
```python
@app.route('/dashboard')
def dashboard():
    if 'user_id' in session:
        user_id = session['user_id']
        
        cursor = mysql.connection.cursor()
        query = """
            SELECT global_items.id, global_items.item_name, global_items.description 
            FROM global_items 
            JOIN user_dashboard ON global_items.id = user_dashboard.item_id 
            WHERE user_dashboard.user_id = %s
        """
        cursor.execute(query, (user_id,))
        items = cursor.fetchall()
        cursor.close()
        
        return render_template('dashboard.html', items=items)
    else:
        return redirect(url_for('login'))
```

#### 3. **Removing Items from the Dashboard**

When a user wants to remove an item from their dashboard, you simply delete the row in the `user_dashboard` table without affecting the `global_items` table.

**Example Flask Route for Removing from Dashboard:**
```python
@app.route('/remove_from_dashboard', methods=['POST'])
def remove_from_dashboard():
    if 'user_id' in session:
        user_id = session['user_id']
        item_id = request.form['item_id']
        
        cursor = mysql.connection.cursor()
        query = "DELETE FROM user_dashboard WHERE user_id = %s AND item_id = %s"
        cursor.execute(query, (user_id, item_id))
        mysql.connection.commit()
        cursor.close()
        
        return redirect(url_for('dashboard'))
    else:
        return redirect(url_for('login'))
```

### Key Points:

- **Global Table Integrity**: The `global_items` table is never modified when users add or remove items from their dashboard. All changes happen in the `user_dashboard` table.
- **User-Specific Data**: The `user_dashboard` table allows you to track which items each user has added to their personal dashboard without affecting other users or the global items.
- **Modular and Scalable**: This structure can scale easily to accommodate more users and items.

This design maintains the integrity of the global data while allowing users to have personalized dashboards.