Using environment variables to hide sensitive information like `SECRET_KEY` and database 
connection strings is a best practice for securing Flask applications. The `os` 
module in Python allows you to access environment variables easily. Hereï¿½s how you can do it:

### 1. Set Environment Variables

You can set environment variables in your operating system, or you can use 
a `.env` file and load them in your Flask application.

#### Option A: Setting Environment Variables Directly

- **On Windows:**

  ```cmd
  set FLASK_SECRET_KEY="your_secret_key"
  set DATABASE_URL="your_database_connection_string"
  ```

- **On macOS/Linux:**

  ```bash
  export FLASK_SECRET_KEY="your_secret_key"
  export DATABASE_URL="your_database_connection_string"
  ```

#### Option B: Using a `.env` File

Create a `.env` file in the root of your project:

```text
FLASK_SECRET_KEY=your_secret_key
DATABASE_URL=your_database_connection_string
```

Then, install the `python-dotenv` package to load these variables automatically:

```bash
pip install python-dotenv
```

In your Flask app, load the `.env` file:

```python
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Access the variables
SECRET_KEY = os.getenv('FLASK_SECRET_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')
```

### 2. Access Environment Variables in Flask

In your Flask application, you can now access these environment variables using the `os.getenv()` function:

```python
from flask import Flask
import os

app = Flask(__name__)

# Set the secret key from environment variable
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY')

# Set the database URI from environment variable
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')

# Initialize extensions (e.g., SQLAlchemy) with the app
# db = SQLAlchemy(app)

if __name__ == '__main__':
    app.run()
```

### 3. Using Environment Variables for Configuration

You can also create a `config.py` file to manage your configurations:

```python
import os

class Config:
    SECRET_KEY = os.getenv('FLASK_SECRET_KEY')
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')

class DevelopmentConfig(Config):
    DEBUG = True

class ProductionConfig(Config):
    DEBUG = False
    TESTING = False

# And so on for different environments
```

Then, load the appropriate configuration in your Flask app:

```python
from flask import Flask
from config import DevelopmentConfig

app = Flask(__name__)
app.config.from_object(DevelopmentConfig)

if __name__ == '__main__':
    app.run()
```

### 4. Summary

- **Use environment variables** to store sensitive data such as `SECRET_KEY` and database connection strings.
- **Access these variables** in your Flask app using the `os.getenv()` function.
- **Consider using a `.env` file** and `python-dotenv` to manage environment variables easily during development.

This setup keeps your sensitive information out of your source code and allows you to easily change configurations depending on the environment (development, testing, production).